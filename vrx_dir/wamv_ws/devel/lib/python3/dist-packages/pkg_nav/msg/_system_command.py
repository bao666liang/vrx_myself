# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pkg_nav/system_command.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class system_command(genpy.Message):
  _md5sum = "c7aa14445a81b855618c21fd7dfb6225"
  _type = "pkg_nav/system_command"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Define the goal
# nav_msgs/Path local_path  
int8 num  #test -cyb
int8 runCommand

# ---
# Define the result
int8  runResult  # #  -1：处理失败  0 : 未处理     1：正在处理   2：处理完成  
int32 result #test -cyb

# ---
# Define a feedback message 
float64 percent_complete  # [0-100]   处理进度 
int8    runState  #  -1：处理失败  0 : 未处理     1：正在处理   2：处理完成 
"""
  __slots__ = ['num','runCommand','runResult','result','percent_complete','runState']
  _slot_types = ['int8','int8','int8','int32','float64','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       num,runCommand,runResult,result,percent_complete,runState

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(system_command, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.num is None:
        self.num = 0
      if self.runCommand is None:
        self.runCommand = 0
      if self.runResult is None:
        self.runResult = 0
      if self.result is None:
        self.result = 0
      if self.percent_complete is None:
        self.percent_complete = 0.
      if self.runState is None:
        self.runState = 0
    else:
      self.num = 0
      self.runCommand = 0
      self.runResult = 0
      self.result = 0
      self.percent_complete = 0.
      self.runState = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3bidb().pack(_x.num, _x.runCommand, _x.runResult, _x.result, _x.percent_complete, _x.runState))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.num, _x.runCommand, _x.runResult, _x.result, _x.percent_complete, _x.runState,) = _get_struct_3bidb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3bidb().pack(_x.num, _x.runCommand, _x.runResult, _x.result, _x.percent_complete, _x.runState))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.num, _x.runCommand, _x.runResult, _x.result, _x.percent_complete, _x.runState,) = _get_struct_3bidb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3bidb = None
def _get_struct_3bidb():
    global _struct_3bidb
    if _struct_3bidb is None:
        _struct_3bidb = struct.Struct("<3bidb")
    return _struct_3bidb
