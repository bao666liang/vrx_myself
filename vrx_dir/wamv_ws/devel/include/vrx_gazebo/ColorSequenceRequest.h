// Generated by gencpp from file vrx_gazebo/ColorSequenceRequest.msg
// DO NOT EDIT!


#ifndef VRX_GAZEBO_MESSAGE_COLORSEQUENCEREQUEST_H
#define VRX_GAZEBO_MESSAGE_COLORSEQUENCEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vrx_gazebo
{
template <class ContainerAllocator>
struct ColorSequenceRequest_
{
  typedef ColorSequenceRequest_<ContainerAllocator> Type;

  ColorSequenceRequest_()
    : color1()
    , color2()
    , color3()  {
    }
  ColorSequenceRequest_(const ContainerAllocator& _alloc)
    : color1(_alloc)
    , color2(_alloc)
    , color3(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color1_type;
  _color1_type color1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color2_type;
  _color2_type color2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color3_type;
  _color3_type color3;





  typedef boost::shared_ptr< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ColorSequenceRequest_

typedef ::vrx_gazebo::ColorSequenceRequest_<std::allocator<void> > ColorSequenceRequest;

typedef boost::shared_ptr< ::vrx_gazebo::ColorSequenceRequest > ColorSequenceRequestPtr;
typedef boost::shared_ptr< ::vrx_gazebo::ColorSequenceRequest const> ColorSequenceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator1> & lhs, const ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.color1 == rhs.color1 &&
    lhs.color2 == rhs.color2 &&
    lhs.color3 == rhs.color3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator1> & lhs, const ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vrx_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "814c89d706310e11e30ed83a7a64e7e3";
  }

  static const char* value(const ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x814c89d706310e11ULL;
  static const uint64_t static_value2 = 0xe30ed83a7a64e7e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vrx_gazebo/ColorSequenceRequest";
  }

  static const char* value(const ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Color sequence submission\n"
"\n"
"# Color sequence\n"
"string color1\n"
"string color2\n"
"string color3\n"
"\n"
;
  }

  static const char* value(const ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color1);
      stream.next(m.color2);
      stream.next(m.color3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ColorSequenceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vrx_gazebo::ColorSequenceRequest_<ContainerAllocator>& v)
  {
    s << indent << "color1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color1);
    s << indent << "color2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color2);
    s << indent << "color3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VRX_GAZEBO_MESSAGE_COLORSEQUENCEREQUEST_H
