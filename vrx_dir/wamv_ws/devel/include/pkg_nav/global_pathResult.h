// Generated by gencpp from file pkg_nav/global_pathResult.msg
// DO NOT EDIT!


#ifndef PKG_NAV_MESSAGE_GLOBAL_PATHRESULT_H
#define PKG_NAV_MESSAGE_GLOBAL_PATHRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/Path.h>
#include <nav_msgs/Path.h>

namespace pkg_nav
{
template <class ContainerAllocator>
struct global_pathResult_
{
  typedef global_pathResult_<ContainerAllocator> Type;

  global_pathResult_()
    : runResult(0)
    , result(0)
    , smoothPath()
    , rawPath()  {
    }
  global_pathResult_(const ContainerAllocator& _alloc)
    : runResult(0)
    , result(0)
    , smoothPath(_alloc)
    , rawPath(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _runResult_type;
  _runResult_type runResult;

   typedef int32_t _result_type;
  _result_type result;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _smoothPath_type;
  _smoothPath_type smoothPath;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _rawPath_type;
  _rawPath_type rawPath;





  typedef boost::shared_ptr< ::pkg_nav::global_pathResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg_nav::global_pathResult_<ContainerAllocator> const> ConstPtr;

}; // struct global_pathResult_

typedef ::pkg_nav::global_pathResult_<std::allocator<void> > global_pathResult;

typedef boost::shared_ptr< ::pkg_nav::global_pathResult > global_pathResultPtr;
typedef boost::shared_ptr< ::pkg_nav::global_pathResult const> global_pathResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg_nav::global_pathResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg_nav::global_pathResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pkg_nav::global_pathResult_<ContainerAllocator1> & lhs, const ::pkg_nav::global_pathResult_<ContainerAllocator2> & rhs)
{
  return lhs.runResult == rhs.runResult &&
    lhs.result == rhs.result &&
    lhs.smoothPath == rhs.smoothPath &&
    lhs.rawPath == rhs.rawPath;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pkg_nav::global_pathResult_<ContainerAllocator1> & lhs, const ::pkg_nav::global_pathResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pkg_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pkg_nav::global_pathResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_nav::global_pathResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_nav::global_pathResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_nav::global_pathResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_nav::global_pathResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_nav::global_pathResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg_nav::global_pathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0484cbdc02fdc0c124615a59a7233b57";
  }

  static const char* value(const ::pkg_nav::global_pathResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0484cbdc02fdc0c1ULL;
  static const uint64_t static_value2 = 0x24615a59a7233b57ULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg_nav::global_pathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg_nav/global_pathResult";
  }

  static const char* value(const ::pkg_nav::global_pathResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg_nav::global_pathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"int8  runResult  # #  -1：处理失败  0 : 未处理     1：正在处理   2：处理完成  \n"
"int32 result #test -cyb\n"
"nav_msgs/Path smoothPath  \n"
"nav_msgs/Path rawPath  \n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::pkg_nav::global_pathResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg_nav::global_pathResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.runResult);
      stream.next(m.result);
      stream.next(m.smoothPath);
      stream.next(m.rawPath);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct global_pathResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg_nav::global_pathResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg_nav::global_pathResult_<ContainerAllocator>& v)
  {
    s << indent << "runResult: ";
    Printer<int8_t>::stream(s, indent + "  ", v.runResult);
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
    s << indent << "smoothPath: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.smoothPath);
    s << indent << "rawPath: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.rawPath);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_NAV_MESSAGE_GLOBAL_PATHRESULT_H
