// Generated by gencpp from file pkg_nav/local_pathResult.msg
// DO NOT EDIT!


#ifndef PKG_NAV_MESSAGE_LOCAL_PATHRESULT_H
#define PKG_NAV_MESSAGE_LOCAL_PATHRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pkg_nav
{
template <class ContainerAllocator>
struct local_pathResult_
{
  typedef local_pathResult_<ContainerAllocator> Type;

  local_pathResult_()
    : runResult(0)
    , result(0)  {
    }
  local_pathResult_(const ContainerAllocator& _alloc)
    : runResult(0)
    , result(0)  {
  (void)_alloc;
    }



   typedef int8_t _runResult_type;
  _runResult_type runResult;

   typedef int32_t _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::pkg_nav::local_pathResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg_nav::local_pathResult_<ContainerAllocator> const> ConstPtr;

}; // struct local_pathResult_

typedef ::pkg_nav::local_pathResult_<std::allocator<void> > local_pathResult;

typedef boost::shared_ptr< ::pkg_nav::local_pathResult > local_pathResultPtr;
typedef boost::shared_ptr< ::pkg_nav::local_pathResult const> local_pathResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg_nav::local_pathResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg_nav::local_pathResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pkg_nav::local_pathResult_<ContainerAllocator1> & lhs, const ::pkg_nav::local_pathResult_<ContainerAllocator2> & rhs)
{
  return lhs.runResult == rhs.runResult &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pkg_nav::local_pathResult_<ContainerAllocator1> & lhs, const ::pkg_nav::local_pathResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pkg_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pkg_nav::local_pathResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_nav::local_pathResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_nav::local_pathResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_nav::local_pathResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_nav::local_pathResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_nav::local_pathResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg_nav::local_pathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2bb32d147ef990e66003bb2d7c8e0b98";
  }

  static const char* value(const ::pkg_nav::local_pathResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2bb32d147ef990e6ULL;
  static const uint64_t static_value2 = 0x6003bb2d7c8e0b98ULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg_nav::local_pathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg_nav/local_pathResult";
  }

  static const char* value(const ::pkg_nav::local_pathResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg_nav::local_pathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"int8  runResult  # #  -1：处理失败  0 : 未处理     1：正在处理   2：处理完成  \n"
"int32 result #test -cyb\n"
;
  }

  static const char* value(const ::pkg_nav::local_pathResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg_nav::local_pathResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.runResult);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct local_pathResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg_nav::local_pathResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg_nav::local_pathResult_<ContainerAllocator>& v)
  {
    s << indent << "runResult: ";
    Printer<int8_t>::stream(s, indent + "  ", v.runResult);
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_NAV_MESSAGE_LOCAL_PATHRESULT_H
