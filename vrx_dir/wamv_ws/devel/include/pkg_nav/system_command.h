// Generated by gencpp from file pkg_nav/system_command.msg
// DO NOT EDIT!


#ifndef PKG_NAV_MESSAGE_SYSTEM_COMMAND_H
#define PKG_NAV_MESSAGE_SYSTEM_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pkg_nav
{
template <class ContainerAllocator>
struct system_command_
{
  typedef system_command_<ContainerAllocator> Type;

  system_command_()
    : num(0)
    , runCommand(0)
    , runResult(0)
    , result(0)
    , percent_complete(0.0)
    , runState(0)  {
    }
  system_command_(const ContainerAllocator& _alloc)
    : num(0)
    , runCommand(0)
    , runResult(0)
    , result(0)
    , percent_complete(0.0)
    , runState(0)  {
  (void)_alloc;
    }



   typedef int8_t _num_type;
  _num_type num;

   typedef int8_t _runCommand_type;
  _runCommand_type runCommand;

   typedef int8_t _runResult_type;
  _runResult_type runResult;

   typedef int32_t _result_type;
  _result_type result;

   typedef double _percent_complete_type;
  _percent_complete_type percent_complete;

   typedef int8_t _runState_type;
  _runState_type runState;





  typedef boost::shared_ptr< ::pkg_nav::system_command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg_nav::system_command_<ContainerAllocator> const> ConstPtr;

}; // struct system_command_

typedef ::pkg_nav::system_command_<std::allocator<void> > system_command;

typedef boost::shared_ptr< ::pkg_nav::system_command > system_commandPtr;
typedef boost::shared_ptr< ::pkg_nav::system_command const> system_commandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg_nav::system_command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg_nav::system_command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pkg_nav::system_command_<ContainerAllocator1> & lhs, const ::pkg_nav::system_command_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.runCommand == rhs.runCommand &&
    lhs.runResult == rhs.runResult &&
    lhs.result == rhs.result &&
    lhs.percent_complete == rhs.percent_complete &&
    lhs.runState == rhs.runState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pkg_nav::system_command_<ContainerAllocator1> & lhs, const ::pkg_nav::system_command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pkg_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pkg_nav::system_command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_nav::system_command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_nav::system_command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_nav::system_command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_nav::system_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_nav::system_command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg_nav::system_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7aa14445a81b855618c21fd7dfb6225";
  }

  static const char* value(const ::pkg_nav::system_command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7aa14445a81b855ULL;
  static const uint64_t static_value2 = 0x618c21fd7dfb6225ULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg_nav::system_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg_nav/system_command";
  }

  static const char* value(const ::pkg_nav::system_command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg_nav::system_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Define the goal\n"
"# nav_msgs/Path local_path  \n"
"int8 num  #test -cyb\n"
"int8 runCommand\n"
"\n"
"# ---\n"
"# Define the result\n"
"int8  runResult  # #  -1：处理失败  0 : 未处理     1：正在处理   2：处理完成  \n"
"int32 result #test -cyb\n"
"\n"
"# ---\n"
"# Define a feedback message \n"
"float64 percent_complete  # [0-100]   处理进度 \n"
"int8    runState  #  -1：处理失败  0 : 未处理     1：正在处理   2：处理完成 \n"
;
  }

  static const char* value(const ::pkg_nav::system_command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg_nav::system_command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.runCommand);
      stream.next(m.runResult);
      stream.next(m.result);
      stream.next(m.percent_complete);
      stream.next(m.runState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct system_command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg_nav::system_command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg_nav::system_command_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num);
    s << indent << "runCommand: ";
    Printer<int8_t>::stream(s, indent + "  ", v.runCommand);
    s << indent << "runResult: ";
    Printer<int8_t>::stream(s, indent + "  ", v.runResult);
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
    s << indent << "percent_complete: ";
    Printer<double>::stream(s, indent + "  ", v.percent_complete);
    s << indent << "runState: ";
    Printer<int8_t>::stream(s, indent + "  ", v.runState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_NAV_MESSAGE_SYSTEM_COMMAND_H
