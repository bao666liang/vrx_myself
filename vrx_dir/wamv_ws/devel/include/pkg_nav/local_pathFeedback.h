// Generated by gencpp from file pkg_nav/local_pathFeedback.msg
// DO NOT EDIT!


#ifndef PKG_NAV_MESSAGE_LOCAL_PATHFEEDBACK_H
#define PKG_NAV_MESSAGE_LOCAL_PATHFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pkg_nav
{
template <class ContainerAllocator>
struct local_pathFeedback_
{
  typedef local_pathFeedback_<ContainerAllocator> Type;

  local_pathFeedback_()
    : percent_complete(0.0)
    , runState(0)
    , progress_bar(0.0)  {
    }
  local_pathFeedback_(const ContainerAllocator& _alloc)
    : percent_complete(0.0)
    , runState(0)
    , progress_bar(0.0)  {
  (void)_alloc;
    }



   typedef double _percent_complete_type;
  _percent_complete_type percent_complete;

   typedef int8_t _runState_type;
  _runState_type runState;

   typedef double _progress_bar_type;
  _progress_bar_type progress_bar;





  typedef boost::shared_ptr< ::pkg_nav::local_pathFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg_nav::local_pathFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct local_pathFeedback_

typedef ::pkg_nav::local_pathFeedback_<std::allocator<void> > local_pathFeedback;

typedef boost::shared_ptr< ::pkg_nav::local_pathFeedback > local_pathFeedbackPtr;
typedef boost::shared_ptr< ::pkg_nav::local_pathFeedback const> local_pathFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg_nav::local_pathFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg_nav::local_pathFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pkg_nav::local_pathFeedback_<ContainerAllocator1> & lhs, const ::pkg_nav::local_pathFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.percent_complete == rhs.percent_complete &&
    lhs.runState == rhs.runState &&
    lhs.progress_bar == rhs.progress_bar;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pkg_nav::local_pathFeedback_<ContainerAllocator1> & lhs, const ::pkg_nav::local_pathFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pkg_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pkg_nav::local_pathFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_nav::local_pathFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_nav::local_pathFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_nav::local_pathFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_nav::local_pathFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_nav::local_pathFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg_nav::local_pathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70d94d6334a1aed97d89bf9a2b40a965";
  }

  static const char* value(const ::pkg_nav::local_pathFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70d94d6334a1aed9ULL;
  static const uint64_t static_value2 = 0x7d89bf9a2b40a965ULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg_nav::local_pathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg_nav/local_pathFeedback";
  }

  static const char* value(const ::pkg_nav::local_pathFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg_nav::local_pathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message \n"
"float64 percent_complete  # [0-1]   处理进度 \n"
"int8    runState  #  -1：处理失败  0 : 未处理     1：正在处理   2：处理完成   \n"
"\n"
"float64 progress_bar  #test -cyb\n"
;
  }

  static const char* value(const ::pkg_nav::local_pathFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg_nav::local_pathFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.percent_complete);
      stream.next(m.runState);
      stream.next(m.progress_bar);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct local_pathFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg_nav::local_pathFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg_nav::local_pathFeedback_<ContainerAllocator>& v)
  {
    s << indent << "percent_complete: ";
    Printer<double>::stream(s, indent + "  ", v.percent_complete);
    s << indent << "runState: ";
    Printer<int8_t>::stream(s, indent + "  ", v.runState);
    s << indent << "progress_bar: ";
    Printer<double>::stream(s, indent + "  ", v.progress_bar);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_NAV_MESSAGE_LOCAL_PATHFEEDBACK_H
