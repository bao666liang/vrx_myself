;; Auto-generated. Do not edit!


(when (boundp 'pkg_nav::local_pathGoal)
  (if (not (find-package "PKG_NAV"))
    (make-package "PKG_NAV"))
  (shadow 'local_pathGoal (find-package "PKG_NAV")))
(unless (find-package "PKG_NAV::LOCAL_PATHGOAL")
  (make-package "PKG_NAV::LOCAL_PATHGOAL"))

(in-package "ROS")
;;//! \htmlinclude local_pathGoal.msg.html
(if (not (find-package "NAV_MSGS"))
  (ros::roseus-add-msgs "nav_msgs"))


(defclass pkg_nav::local_pathGoal
  :super ros::object
  :slots (_local_path _num _runCommand ))

(defmethod pkg_nav::local_pathGoal
  (:init
   (&key
    ((:local_path __local_path) (instance nav_msgs::Path :init))
    ((:num __num) 0)
    ((:runCommand __runCommand) 0)
    )
   (send-super :init)
   (setq _local_path __local_path)
   (setq _num (round __num))
   (setq _runCommand (round __runCommand))
   self)
  (:local_path
   (&rest __local_path)
   (if (keywordp (car __local_path))
       (send* _local_path __local_path)
     (progn
       (if __local_path (setq _local_path (car __local_path)))
       _local_path)))
  (:num
   (&optional __num)
   (if __num (setq _num __num)) _num)
  (:runCommand
   (&optional __runCommand)
   (if __runCommand (setq _runCommand __runCommand)) _runCommand)
  (:serialization-length
   ()
   (+
    ;; nav_msgs/Path _local_path
    (send _local_path :serialization-length)
    ;; int32 _num
    4
    ;; int32 _runCommand
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; nav_msgs/Path _local_path
       (send _local_path :serialize s)
     ;; int32 _num
       (write-long _num s)
     ;; int32 _runCommand
       (write-long _runCommand s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; nav_msgs/Path _local_path
     (send _local_path :deserialize buf ptr-) (incf ptr- (send _local_path :serialization-length))
   ;; int32 _num
     (setq _num (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; int32 _runCommand
     (setq _runCommand (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get pkg_nav::local_pathGoal :md5sum-) "7452c78fbbd2c3f3a4cb422fb3e192fe")
(setf (get pkg_nav::local_pathGoal :datatype-) "pkg_nav/local_pathGoal")
(setf (get pkg_nav::local_pathGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
nav_msgs/Path local_path  
int32 num  #test -cyb
int32 runCommand



================================================================================
MSG: nav_msgs/Path
#An array of poses that represents a Path for a robot to follow
Header header
geometry_msgs/PoseStamped[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :pkg_nav/local_pathGoal "7452c78fbbd2c3f3a4cb422fb3e192fe")


